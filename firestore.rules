rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Admin access: allow read, update, delete to everything.
		match /{document=**} {
      allow read, write: if 'admin' in
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles;
    }

		// RULE for users:
    // - only the user itself may create user data.
    // - all registered users may read user data.
    // - only the user itself may write and delete user data.
    match /users/{userId} {
    	allow create: if request.auth.uid == request.resource.id;
    	allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow update, delete: if request.auth.uid == userId;
    }

		// RULE for characters:
    // - only the owner may create character data.
    // - all registered users may read character data.
    // - only the owner may write and delete character data.
    match /characters/{charId} {
    	allow create: if request.resource.data.owner
      	== /databases/$(database)/documents/users/$(request.auth.uid);
    	allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow update, delete: if resource.data.owner
      	== /databases/$(database)/documents/users/$(request.auth.uid);
    }
    
		// RULE for campaigns:
    // - only the owner may create campaign data.
    // - all registered users may read campaign data.
    // - only the owner may write and delete campaign data.
    match /campaigns/{campId} {
    	allow create: if request.resource.data.owner
      	== /databases/$(database)/documents/users/$(request.auth.uid);
    	allow read: if exists(/databases/$(database)/documents/users/$(request.auth.uid));
      allow update, delete: if resource.data.owner
      	== /databases/$(database)/documents/users/$(request.auth.uid);
    }
    
  }
}